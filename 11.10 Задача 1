using System;
using System.Collections.Generic;

class Animal
{
    public int Age { get; set; }
    public string Name { get; set; }

    public Animal(string name, int age)
    {
        Name = name;
        Age = age;
    }

    public override string ToString()
    {
        return $"{Name}, {Age} лет";
    }
}

class Program
{
    static void Main()
    {
        // 1. Создаем список животных
        List<Animal> animals = new List<Animal>
        {
            new Animal("Кот", 3),
            new Animal("Собака", 5),
            new Animal("Попугай", 2)
        };

        // 2. Отображаем список на консоль
        Console.WriteLine("Исходный список:");
        foreach (var a in animals)
            Console.WriteLine(a);

        // 3. Пробуем отсортировать (без реализации IComparable)
        try
        {
            animals.Sort(); // <-- здесь будет исключение
        }
        catch (Exception ex)
        {
            Console.WriteLine("\nИсключение при сортировке:");
            Console.WriteLine(ex.Message);
            Console.WriteLine("Причина: класс Animal не реализует интерфейс IComparable, " +
                              "поэтому система не знает, как сравнивать объекты Animal.");
        }

        // 4. Реализуем сравнение и сортируем заново
        List<ComparableAnimal> comparableAnimals = new List<ComparableAnimal>
        {
            new ComparableAnimal("Кот", 3),
            new ComparableAnimal("Собака", 5),
            new ComparableAnimal("Попугай", 2)
        };

        comparableAnimals.Sort();

        Console.WriteLine("\nСписок после сортировки (по возрасту):");
        foreach (var a in comparableAnimals)
            Console.WriteLine(a);
    }
}

// Класс, реализующий интерфейс IComparable
class ComparableAnimal : Animal, IComparable<ComparableAnimal>
{
    public ComparableAnimal(string name, int age) : base(name, age) { }

    public int CompareTo(ComparableAnimal other)
    {
        // Сортировка по возрасту
        if (other == null) return 1;
        return this.Age.CompareTo(other.Age);
    }
}
